# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IyxwxGDX0jKVFULEojbaW3RfXMveoPTb
"""

#importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

1  df=pd.read_csv("/content/drive/MyDrive/Thyroid_Diff.csv")

df.head()

columns=df.columns

def valuecounts():
  columns=df.columns
  for i in columns:
    print(df[i].value_counts())

df.apply(valuecounts())

"""value count show female has more patient than male"""

df

from sklearn.preprocessing import LabelEncoder
Encoder=LabelEncoder()

df["Smoking	"]=Encoder.fit_transform(df["Smoking"])
df["Hx Smoking"]=Encoder.fit_transform(df["Hx Smoking"])
df["Hx Radiothreapy"]=Encoder.fit_transform(df["Hx Radiothreapy"])
df["Smoking"]=Encoder.fit_transform(df["Smoking"])
df["Thyroid Function"]=Encoder.fit_transform(df["Thyroid Function"])
df["Adenopathy"]=Encoder.fit_transform(df["Adenopathy"])
df["Focality"]=Encoder.fit_transform(df["Focality"])
df["Risk"]=Encoder.fit_transform(df["Risk"])
df["T"]=Encoder.fit_transform(df["T"])
df["N"]=Encoder.fit_transform(df["N"])
df["M"]=Encoder.fit_transform(df["M"])
df["Stage"]=Encoder.fit_transform(df["Stage"])
df["Response"]=Encoder.fit_transform(df["Response"])
df["Recurred"]=Encoder.fit_transform(df["Recurred"])
df["Physical Examination"]=Encoder.fit_transform(df["Physical Examination"])
df["Pathology"]=Encoder.fit_transform(df["Pathology"])

df.head()

df.drop(columns=["Smoking\t"],inplace=True)

df

df

x=df.drop(columns=["Recurred"])
y=df.Recurred

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=3,stratify=y)

x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)
pickle.dump(scaler,open("scaler.pkl",'wb'))

"""# **Support Vector Machine **"""

from sklearn import svm
SVM=svm.SVC()
SVM.fit(x_train,y_train)
predict1=SVM.predict(x_test)

"""# **Random Forest Classifier**"""

from sklearn.model_selection import  RandomizedSearchCV
param_grid={'n_estimators':[10,20,25,50],
            'criterion':['gini','entropy'],
            'max_depth':[10,15,20,30]}
random_Search=RandomizedSearchCV(estimator=RFC,param_distributions=param_grid,n_iter=50,scoring='precision',n_jobs=-1,random_state=4)
random_Search.fit(x_train,y_train)

random_Search.best_params_

from sklearn.ensemble import RandomForestClassifier
RFC=RandomForestClassifier(n_estimators=20,max_depth=10,criterion='gini')
RFC.fit(x_train,y_train)

predict=RFC.predict(x_test)

#predict=RFC.predict(x_test)

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score

print(accuracy_score(y_test,predict))
print(precision_score(y_test,predict))
print(recall_score(y_test,predict))
print(f1_score(y_test,predict))
print(SVM)
print(accuracy_score(y_test,predict1))
print(precision_score(y_test,predict1))
print(recall_score(y_test,predict1))
print(f1_score(y_test,predict1))

xpredict=RFC.predict(x_train)

print(accuracy_score(y_train,xpredict))

import pickle
pickle.dump(RFC,open('RFC.pkl','wb'))

